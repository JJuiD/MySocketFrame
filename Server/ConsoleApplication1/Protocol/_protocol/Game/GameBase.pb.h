// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameBase.proto

#ifndef PROTOBUF_INCLUDED_GameBase_2eproto
#define PROTOBUF_INCLUDED_GameBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameBase_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GameBase_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GameBase_2eproto();
namespace Proto {
namespace GameBase {
class FlagMsg;
class FlagMsgDefaultTypeInternal;
extern FlagMsgDefaultTypeInternal _FlagMsg_default_instance_;
class GameUserInfo;
class GameUserInfoDefaultTypeInternal;
extern GameUserInfoDefaultTypeInternal _GameUserInfo_default_instance_;
class Position;
class PositionDefaultTypeInternal;
extern PositionDefaultTypeInternal _Position_default_instance_;
}  // namespace GameBase
}  // namespace Proto
namespace google {
namespace protobuf {
template<> ::Proto::GameBase::FlagMsg* Arena::CreateMaybeMessage<::Proto::GameBase::FlagMsg>(Arena*);
template<> ::Proto::GameBase::GameUserInfo* Arena::CreateMaybeMessage<::Proto::GameBase::GameUserInfo>(Arena*);
template<> ::Proto::GameBase::Position* Arena::CreateMaybeMessage<::Proto::GameBase::Position>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Proto {
namespace GameBase {

enum GameCommand {
  CMDG_KEY = 1,
  CMDG_MOVE = 2,
  CMDG_REQSTARTGAME = 3,
  CMDG_RESPSTARTGAME = 4
};
bool GameCommand_IsValid(int value);
const GameCommand GameCommand_MIN = CMDG_KEY;
const GameCommand GameCommand_MAX = CMDG_RESPSTARTGAME;
const int GameCommand_ARRAYSIZE = GameCommand_MAX + 1;

const ::google::protobuf::EnumDescriptor* GameCommand_descriptor();
inline const ::std::string& GameCommand_Name(GameCommand value) {
  return ::google::protobuf::internal::NameOfEnum(
    GameCommand_descriptor(), value);
}
inline bool GameCommand_Parse(
    const ::std::string& name, GameCommand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GameCommand>(
    GameCommand_descriptor(), name, value);
}
// ===================================================================

class Position : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameBase.Position) */ {
 public:
  Position();
  virtual ~Position();

  Position(const Position& from);

  inline Position& operator=(const Position& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Position(Position&& from) noexcept
    : Position() {
    *this = ::std::move(from);
  }

  inline Position& operator=(Position&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Position& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Position* internal_default_instance() {
    return reinterpret_cast<const Position*>(
               &_Position_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Position* other);
  friend void swap(Position& a, Position& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Position* New() const final {
    return CreateMaybeMessage<Position>(nullptr);
  }

  Position* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Position>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Position& from);
  void MergeFrom(const Position& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Position* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 x = 1;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // optional int32 y = 2;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // optional int32 z = 3;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameBase.Position)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  friend struct ::TableStruct_GameBase_2eproto;
};
// -------------------------------------------------------------------

class GameUserInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameBase.GameUserInfo) */ {
 public:
  GameUserInfo();
  virtual ~GameUserInfo();

  GameUserInfo(const GameUserInfo& from);

  inline GameUserInfo& operator=(const GameUserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GameUserInfo(GameUserInfo&& from) noexcept
    : GameUserInfo() {
    *this = ::std::move(from);
  }

  inline GameUserInfo& operator=(GameUserInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GameUserInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GameUserInfo* internal_default_instance() {
    return reinterpret_cast<const GameUserInfo*>(
               &_GameUserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(GameUserInfo* other);
  friend void swap(GameUserInfo& a, GameUserInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GameUserInfo* New() const final {
    return CreateMaybeMessage<GameUserInfo>(nullptr);
  }

  GameUserInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GameUserInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GameUserInfo& from);
  void MergeFrom(const GameUserInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GameUserInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required .Proto.GameBase.Position pos = 3;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 3;
  const ::Proto::GameBase::Position& pos() const;
  ::Proto::GameBase::Position* release_pos();
  ::Proto::GameBase::Position* mutable_pos();
  void set_allocated_pos(::Proto::GameBase::Position* pos);

  // @@protoc_insertion_point(class_scope:Proto.GameBase.GameUserInfo)
 private:
  class HasBitSetters;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::Proto::GameBase::Position* pos_;
  friend struct ::TableStruct_GameBase_2eproto;
};
// -------------------------------------------------------------------

class FlagMsg : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameBase.FlagMsg) */ {
 public:
  FlagMsg();
  virtual ~FlagMsg();

  FlagMsg(const FlagMsg& from);

  inline FlagMsg& operator=(const FlagMsg& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  FlagMsg(FlagMsg&& from) noexcept
    : FlagMsg() {
    *this = ::std::move(from);
  }

  inline FlagMsg& operator=(FlagMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const FlagMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FlagMsg* internal_default_instance() {
    return reinterpret_cast<const FlagMsg*>(
               &_FlagMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(FlagMsg* other);
  friend void swap(FlagMsg& a, FlagMsg& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline FlagMsg* New() const final {
    return CreateMaybeMessage<FlagMsg>(nullptr);
  }

  FlagMsg* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<FlagMsg>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const FlagMsg& from);
  void MergeFrom(const FlagMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FlagMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const void* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional uint32 flag = 1;
  bool has_flag() const;
  void clear_flag();
  static const int kFlagFieldNumber = 1;
  ::google::protobuf::uint32 flag() const;
  void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameBase.FlagMsg)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::uint32 flag_;
  friend struct ::TableStruct_GameBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Position

// optional int32 x = 1;
inline bool Position::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Position::clear_x() {
  x_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::int32 Position::x() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.Position.x)
  return x_;
}
inline void Position::set_x(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameBase.Position.x)
}

// optional int32 y = 2;
inline bool Position::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Position::clear_y() {
  y_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::int32 Position::y() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.Position.y)
  return y_;
}
inline void Position::set_y(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameBase.Position.y)
}

// optional int32 z = 3;
inline bool Position::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Position::clear_z() {
  z_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::google::protobuf::int32 Position::z() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.Position.z)
  return z_;
}
inline void Position::set_z(::google::protobuf::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  z_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameBase.Position.z)
}

// -------------------------------------------------------------------

// GameUserInfo

// required string id = 1;
inline bool GameUserInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GameUserInfo::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& GameUserInfo::id() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.GameUserInfo.id)
  return id_.GetNoArena();
}
inline void GameUserInfo::set_id(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameBase.GameUserInfo.id)
}
#if LANG_CXX11
inline void GameUserInfo::set_id(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameBase.GameUserInfo.id)
}
#endif
inline void GameUserInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameBase.GameUserInfo.id)
}
inline void GameUserInfo::set_id(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameBase.GameUserInfo.id)
}
inline ::std::string* GameUserInfo::mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Proto.GameBase.GameUserInfo.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameUserInfo::release_id() {
  // @@protoc_insertion_point(field_release:Proto.GameBase.GameUserInfo.id)
  if (!has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameUserInfo::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameBase.GameUserInfo.id)
}

// required string name = 2;
inline bool GameUserInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GameUserInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::std::string& GameUserInfo::name() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.GameUserInfo.name)
  return name_.GetNoArena();
}
inline void GameUserInfo::set_name(const ::std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameBase.GameUserInfo.name)
}
#if LANG_CXX11
inline void GameUserInfo::set_name(::std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameBase.GameUserInfo.name)
}
#endif
inline void GameUserInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameBase.GameUserInfo.name)
}
inline void GameUserInfo::set_name(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000002u;
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameBase.GameUserInfo.name)
}
inline ::std::string* GameUserInfo::mutable_name() {
  _has_bits_[0] |= 0x00000002u;
  // @@protoc_insertion_point(field_mutable:Proto.GameBase.GameUserInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GameUserInfo::release_name() {
  // @@protoc_insertion_point(field_release:Proto.GameBase.GameUserInfo.name)
  if (!has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GameUserInfo::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameBase.GameUserInfo.name)
}

// required .Proto.GameBase.Position pos = 3;
inline bool GameUserInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GameUserInfo::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::Proto::GameBase::Position& GameUserInfo::pos() const {
  const ::Proto::GameBase::Position* p = pos_;
  // @@protoc_insertion_point(field_get:Proto.GameBase.GameUserInfo.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::GameBase::Position*>(
      &::Proto::GameBase::_Position_default_instance_);
}
inline ::Proto::GameBase::Position* GameUserInfo::release_pos() {
  // @@protoc_insertion_point(field_release:Proto.GameBase.GameUserInfo.pos)
  _has_bits_[0] &= ~0x00000004u;
  ::Proto::GameBase::Position* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Proto::GameBase::Position* GameUserInfo::mutable_pos() {
  _has_bits_[0] |= 0x00000004u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::GameBase::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.GameBase.GameUserInfo.pos)
  return pos_;
}
inline void GameUserInfo::set_allocated_pos(::Proto::GameBase::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete pos_;
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Proto.GameBase.GameUserInfo.pos)
}

// -------------------------------------------------------------------

// FlagMsg

// optional uint32 flag = 1;
inline bool FlagMsg::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FlagMsg::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::google::protobuf::uint32 FlagMsg::flag() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.FlagMsg.flag)
  return flag_;
}
inline void FlagMsg::set_flag(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameBase.FlagMsg.flag)
}

// optional bytes msg = 2;
inline bool FlagMsg::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FlagMsg::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& FlagMsg::msg() const {
  // @@protoc_insertion_point(field_get:Proto.GameBase.FlagMsg.msg)
  return msg_.GetNoArena();
}
inline void FlagMsg::set_msg(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameBase.FlagMsg.msg)
}
#if LANG_CXX11
inline void FlagMsg::set_msg(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameBase.FlagMsg.msg)
}
#endif
inline void FlagMsg::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameBase.FlagMsg.msg)
}
inline void FlagMsg::set_msg(const void* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameBase.FlagMsg.msg)
}
inline ::std::string* FlagMsg::mutable_msg() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Proto.GameBase.FlagMsg.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* FlagMsg::release_msg() {
  // @@protoc_insertion_point(field_release:Proto.GameBase.FlagMsg.msg)
  if (!has_msg()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void FlagMsg::set_allocated_msg(::std::string* msg) {
  if (msg != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameBase.FlagMsg.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameBase
}  // namespace Proto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::Proto::GameBase::GameCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Proto::GameBase::GameCommand>() {
  return ::Proto::GameBase::GameCommand_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GameBase_2eproto
