// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProto.proto

#ifndef PROTOBUF_INCLUDED_GameProto_2eproto
#define PROTOBUF_INCLUDED_GameProto_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3006001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "GameBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_GameProto_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_GameProto_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_GameProto_2eproto();
namespace Proto {
namespace GameProto {
class ReqKey;
class ReqKeyDefaultTypeInternal;
extern ReqKeyDefaultTypeInternal _ReqKey_default_instance_;
class ReqStartGame;
class ReqStartGameDefaultTypeInternal;
extern ReqStartGameDefaultTypeInternal _ReqStartGame_default_instance_;
class RespActionMove;
class RespActionMoveDefaultTypeInternal;
extern RespActionMoveDefaultTypeInternal _RespActionMove_default_instance_;
class RespStartGame;
class RespStartGameDefaultTypeInternal;
extern RespStartGameDefaultTypeInternal _RespStartGame_default_instance_;
}  // namespace GameProto
}  // namespace Proto
namespace google {
namespace protobuf {
template<> ::Proto::GameProto::ReqKey* Arena::CreateMaybeMessage<::Proto::GameProto::ReqKey>(Arena*);
template<> ::Proto::GameProto::ReqStartGame* Arena::CreateMaybeMessage<::Proto::GameProto::ReqStartGame>(Arena*);
template<> ::Proto::GameProto::RespActionMove* Arena::CreateMaybeMessage<::Proto::GameProto::RespActionMove>(Arena*);
template<> ::Proto::GameProto::RespStartGame* Arena::CreateMaybeMessage<::Proto::GameProto::RespStartGame>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace Proto {
namespace GameProto {

// ===================================================================

class ReqStartGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameProto.ReqStartGame) */ {
 public:
  ReqStartGame();
  virtual ~ReqStartGame();

  ReqStartGame(const ReqStartGame& from);

  inline ReqStartGame& operator=(const ReqStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqStartGame(ReqStartGame&& from) noexcept
    : ReqStartGame() {
    *this = ::std::move(from);
  }

  inline ReqStartGame& operator=(ReqStartGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqStartGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqStartGame* internal_default_instance() {
    return reinterpret_cast<const ReqStartGame*>(
               &_ReqStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ReqStartGame* other);
  friend void swap(ReqStartGame& a, ReqStartGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqStartGame* New() const final {
    return CreateMaybeMessage<ReqStartGame>(nullptr);
  }

  ReqStartGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqStartGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqStartGame& from);
  void MergeFrom(const ReqStartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqStartGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 roomid = 1;
  bool has_roomid() const;
  void clear_roomid();
  static const int kRoomidFieldNumber = 1;
  ::google::protobuf::uint32 roomid() const;
  void set_roomid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Proto.GameProto.ReqStartGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 roomid_;
  friend struct ::TableStruct_GameProto_2eproto;
};
// -------------------------------------------------------------------

class RespStartGame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameProto.RespStartGame) */ {
 public:
  RespStartGame();
  virtual ~RespStartGame();

  RespStartGame(const RespStartGame& from);

  inline RespStartGame& operator=(const RespStartGame& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RespStartGame(RespStartGame&& from) noexcept
    : RespStartGame() {
    *this = ::std::move(from);
  }

  inline RespStartGame& operator=(RespStartGame&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RespStartGame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespStartGame* internal_default_instance() {
    return reinterpret_cast<const RespStartGame*>(
               &_RespStartGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RespStartGame* other);
  friend void swap(RespStartGame& a, RespStartGame& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RespStartGame* New() const final {
    return CreateMaybeMessage<RespStartGame>(nullptr);
  }

  RespStartGame* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RespStartGame>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RespStartGame& from);
  void MergeFrom(const RespStartGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespStartGame* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
  int gameuser_size() const;
  void clear_gameuser();
  static const int kGameUserFieldNumber = 1;
  ::Proto::GameBase::GameUserInfo* mutable_gameuser(int index);
  ::google::protobuf::RepeatedPtrField< ::Proto::GameBase::GameUserInfo >*
      mutable_gameuser();
  const ::Proto::GameBase::GameUserInfo& gameuser(int index) const;
  ::Proto::GameBase::GameUserInfo* add_gameuser();
  const ::google::protobuf::RepeatedPtrField< ::Proto::GameBase::GameUserInfo >&
      gameuser() const;

  // @@protoc_insertion_point(class_scope:Proto.GameProto.RespStartGame)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::Proto::GameBase::GameUserInfo > gameuser_;
  friend struct ::TableStruct_GameProto_2eproto;
};
// -------------------------------------------------------------------

class ReqKey : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameProto.ReqKey) */ {
 public:
  ReqKey();
  virtual ~ReqKey();

  ReqKey(const ReqKey& from);

  inline ReqKey& operator=(const ReqKey& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReqKey(ReqKey&& from) noexcept
    : ReqKey() {
    *this = ::std::move(from);
  }

  inline ReqKey& operator=(ReqKey&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReqKey& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReqKey* internal_default_instance() {
    return reinterpret_cast<const ReqKey*>(
               &_ReqKey_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ReqKey* other);
  friend void swap(ReqKey& a, ReqKey& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReqKey* New() const final {
    return CreateMaybeMessage<ReqKey>(nullptr);
  }

  ReqKey* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReqKey>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReqKey& from);
  void MergeFrom(const ReqKey& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqKey* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // @@protoc_insertion_point(class_scope:Proto.GameProto.ReqKey)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  friend struct ::TableStruct_GameProto_2eproto;
};
// -------------------------------------------------------------------

class RespActionMove : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Proto.GameProto.RespActionMove) */ {
 public:
  RespActionMove();
  virtual ~RespActionMove();

  RespActionMove(const RespActionMove& from);

  inline RespActionMove& operator=(const RespActionMove& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RespActionMove(RespActionMove&& from) noexcept
    : RespActionMove() {
    *this = ::std::move(from);
  }

  inline RespActionMove& operator=(RespActionMove&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RespActionMove& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RespActionMove* internal_default_instance() {
    return reinterpret_cast<const RespActionMove*>(
               &_RespActionMove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RespActionMove* other);
  friend void swap(RespActionMove& a, RespActionMove& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RespActionMove* New() const final {
    return CreateMaybeMessage<RespActionMove>(nullptr);
  }

  RespActionMove* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RespActionMove>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RespActionMove& from);
  void MergeFrom(const RespActionMove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RespActionMove* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .Proto.GameBase.Position pos = 1;
  bool has_pos() const;
  void clear_pos();
  static const int kPosFieldNumber = 1;
  const ::Proto::GameBase::Position& pos() const;
  ::Proto::GameBase::Position* release_pos();
  ::Proto::GameBase::Position* mutable_pos();
  void set_allocated_pos(::Proto::GameBase::Position* pos);

  // @@protoc_insertion_point(class_scope:Proto.GameProto.RespActionMove)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::Proto::GameBase::Position* pos_;
  friend struct ::TableStruct_GameProto_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqStartGame

// required uint32 roomid = 1;
inline bool ReqStartGame::has_roomid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqStartGame::clear_roomid() {
  roomid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::google::protobuf::uint32 ReqStartGame::roomid() const {
  // @@protoc_insertion_point(field_get:Proto.GameProto.ReqStartGame.roomid)
  return roomid_;
}
inline void ReqStartGame::set_roomid(::google::protobuf::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  roomid_ = value;
  // @@protoc_insertion_point(field_set:Proto.GameProto.ReqStartGame.roomid)
}

// -------------------------------------------------------------------

// RespStartGame

// repeated .Proto.GameBase.GameUserInfo gameUser = 1;
inline int RespStartGame::gameuser_size() const {
  return gameuser_.size();
}
inline ::Proto::GameBase::GameUserInfo* RespStartGame::mutable_gameuser(int index) {
  // @@protoc_insertion_point(field_mutable:Proto.GameProto.RespStartGame.gameUser)
  return gameuser_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::Proto::GameBase::GameUserInfo >*
RespStartGame::mutable_gameuser() {
  // @@protoc_insertion_point(field_mutable_list:Proto.GameProto.RespStartGame.gameUser)
  return &gameuser_;
}
inline const ::Proto::GameBase::GameUserInfo& RespStartGame::gameuser(int index) const {
  // @@protoc_insertion_point(field_get:Proto.GameProto.RespStartGame.gameUser)
  return gameuser_.Get(index);
}
inline ::Proto::GameBase::GameUserInfo* RespStartGame::add_gameuser() {
  // @@protoc_insertion_point(field_add:Proto.GameProto.RespStartGame.gameUser)
  return gameuser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Proto::GameBase::GameUserInfo >&
RespStartGame::gameuser() const {
  // @@protoc_insertion_point(field_list:Proto.GameProto.RespStartGame.gameUser)
  return gameuser_;
}

// -------------------------------------------------------------------

// ReqKey

// required string key = 1;
inline bool ReqKey::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqKey::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::std::string& ReqKey::key() const {
  // @@protoc_insertion_point(field_get:Proto.GameProto.ReqKey.key)
  return key_.GetNoArena();
}
inline void ReqKey::set_key(const ::std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:Proto.GameProto.ReqKey.key)
}
#if LANG_CXX11
inline void ReqKey::set_key(::std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:Proto.GameProto.ReqKey.key)
}
#endif
inline void ReqKey::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:Proto.GameProto.ReqKey.key)
}
inline void ReqKey::set_key(const char* value, size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:Proto.GameProto.ReqKey.key)
}
inline ::std::string* ReqKey::mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_mutable:Proto.GameProto.ReqKey.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReqKey::release_key() {
  // @@protoc_insertion_point(field_release:Proto.GameProto.ReqKey.key)
  if (!has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReqKey::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:Proto.GameProto.ReqKey.key)
}

// -------------------------------------------------------------------

// RespActionMove

// optional .Proto.GameBase.Position pos = 1;
inline bool RespActionMove::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline const ::Proto::GameBase::Position& RespActionMove::pos() const {
  const ::Proto::GameBase::Position* p = pos_;
  // @@protoc_insertion_point(field_get:Proto.GameProto.RespActionMove.pos)
  return p != nullptr ? *p : *reinterpret_cast<const ::Proto::GameBase::Position*>(
      &::Proto::GameBase::_Position_default_instance_);
}
inline ::Proto::GameBase::Position* RespActionMove::release_pos() {
  // @@protoc_insertion_point(field_release:Proto.GameProto.RespActionMove.pos)
  _has_bits_[0] &= ~0x00000001u;
  ::Proto::GameBase::Position* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::Proto::GameBase::Position* RespActionMove::mutable_pos() {
  _has_bits_[0] |= 0x00000001u;
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::Proto::GameBase::Position>(GetArenaNoVirtual());
    pos_ = p;
  }
  // @@protoc_insertion_point(field_mutable:Proto.GameProto.RespActionMove.pos)
  return pos_;
}
inline void RespActionMove::set_allocated_pos(::Proto::GameBase::Position* pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pos_);
  }
  if (pos) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:Proto.GameProto.RespActionMove.pos)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameProto
}  // namespace Proto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_GameProto_2eproto
