// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GameProto.proto

#include "GameProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

extern PROTOBUF_INTERNAL_EXPORT_GameBase_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Position_GameBase_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_GameBase_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_GameUserInfo_GameBase_2eproto;
namespace Proto {
namespace GameProto {
class ReqStartGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqStartGame> _instance;
} _ReqStartGame_default_instance_;
class RespStartGameDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespStartGame> _instance;
} _RespStartGame_default_instance_;
class ReqKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ReqKey> _instance;
} _ReqKey_default_instance_;
class RespActionMoveDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RespActionMove> _instance;
} _RespActionMove_default_instance_;
}  // namespace GameProto
}  // namespace Proto
static void InitDefaultsReqStartGame_GameProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::GameProto::_ReqStartGame_default_instance_;
    new (ptr) ::Proto::GameProto::ReqStartGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GameProto::ReqStartGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqStartGame_GameProto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqStartGame_GameProto_2eproto}, {}};

static void InitDefaultsRespStartGame_GameProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::GameProto::_RespStartGame_default_instance_;
    new (ptr) ::Proto::GameProto::RespStartGame();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GameProto::RespStartGame::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespStartGame_GameProto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespStartGame_GameProto_2eproto}, {
      &scc_info_GameUserInfo_GameBase_2eproto.base,}};

static void InitDefaultsReqKey_GameProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::GameProto::_ReqKey_default_instance_;
    new (ptr) ::Proto::GameProto::ReqKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GameProto::ReqKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ReqKey_GameProto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsReqKey_GameProto_2eproto}, {}};

static void InitDefaultsRespActionMove_GameProto_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::Proto::GameProto::_RespActionMove_default_instance_;
    new (ptr) ::Proto::GameProto::RespActionMove();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Proto::GameProto::RespActionMove::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RespActionMove_GameProto_2eproto =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRespActionMove_GameProto_2eproto}, {
      &scc_info_Position_GameBase_2eproto.base,}};

void InitDefaults_GameProto_2eproto() {
  ::google::protobuf::internal::InitSCC(&scc_info_ReqStartGame_GameProto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespStartGame_GameProto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ReqKey_GameProto_2eproto.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RespActionMove_GameProto_2eproto.base);
}

::google::protobuf::Metadata file_level_metadata_GameProto_2eproto[4];
constexpr ::google::protobuf::EnumDescriptor const** file_level_enum_descriptors_GameProto_2eproto = nullptr;
constexpr ::google::protobuf::ServiceDescriptor const** file_level_service_descriptors_GameProto_2eproto = nullptr;

const ::google::protobuf::uint32 TableStruct_GameProto_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqStartGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqStartGame, roomid_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespStartGame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespStartGame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespStartGame, gameuser_),
  ~0u,
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqKey, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::ReqKey, key_),
  0,
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespActionMove, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespActionMove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Proto::GameProto::RespActionMove, pos_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::Proto::GameProto::ReqStartGame)},
  { 7, 13, sizeof(::Proto::GameProto::RespStartGame)},
  { 14, 20, sizeof(::Proto::GameProto::ReqKey)},
  { 21, 27, sizeof(::Proto::GameProto::RespActionMove)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::GameProto::_ReqStartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::GameProto::_RespStartGame_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::GameProto::_ReqKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::Proto::GameProto::_RespActionMove_default_instance_),
};

::google::protobuf::internal::AssignDescriptorsTable assign_descriptors_table_GameProto_2eproto = {
  {}, AddDescriptors_GameProto_2eproto, "GameProto.proto", schemas,
  file_default_instances, TableStruct_GameProto_2eproto::offsets,
  file_level_metadata_GameProto_2eproto, 4, file_level_enum_descriptors_GameProto_2eproto, file_level_service_descriptors_GameProto_2eproto,
};

const char descriptor_table_protodef_GameProto_2eproto[] =
  "\n\017GameProto.proto\022\017Proto.GameProto\032\016Game"
  "Base.proto\"\036\n\014ReqStartGame\022\016\n\006roomid\030\001 \002"
  "(\r\"\?\n\rRespStartGame\022.\n\010gameUser\030\001 \003(\0132\034."
  "Proto.GameBase.GameUserInfo\"\025\n\006ReqKey\022\013\n"
  "\003key\030\001 \002(\t\"7\n\016RespActionMove\022%\n\003pos\030\001 \001("
  "\0132\030.Proto.GameBase.Position"
  ;
::google::protobuf::internal::DescriptorTable descriptor_table_GameProto_2eproto = {
  false, InitDefaults_GameProto_2eproto, 
  descriptor_table_protodef_GameProto_2eproto,
  "GameProto.proto", &assign_descriptors_table_GameProto_2eproto, 227,
};

void AddDescriptors_GameProto_2eproto() {
  static constexpr ::google::protobuf::internal::InitFunc deps[1] =
  {
    ::AddDescriptors_GameBase_2eproto,
  };
 ::google::protobuf::internal::AddDescriptors(&descriptor_table_GameProto_2eproto, deps, 1);
}

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_GameProto_2eproto = []() { AddDescriptors_GameProto_2eproto(); return true; }();
namespace Proto {
namespace GameProto {

// ===================================================================

void ReqStartGame::InitAsDefaultInstance() {
}
class ReqStartGame::HasBitSetters {
 public:
  static void set_has_roomid(ReqStartGame* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqStartGame::kRoomidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqStartGame::ReqStartGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameProto.ReqStartGame)
}
ReqStartGame::ReqStartGame(const ReqStartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  roomid_ = from.roomid_;
  // @@protoc_insertion_point(copy_constructor:Proto.GameProto.ReqStartGame)
}

void ReqStartGame::SharedCtor() {
  roomid_ = 0u;
}

ReqStartGame::~ReqStartGame() {
  // @@protoc_insertion_point(destructor:Proto.GameProto.ReqStartGame)
  SharedDtor();
}

void ReqStartGame::SharedDtor() {
}

void ReqStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqStartGame& ReqStartGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReqStartGame_GameProto_2eproto.base);
  return *internal_default_instance();
}


void ReqStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameProto.ReqStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  roomid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqStartGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReqStartGame*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required uint32 roomid = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 8) goto handle_unusual;
        ::google::protobuf::uint64 val;
        ptr = Varint::Parse64(ptr, &val);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ::google::protobuf::uint32 value = val;
        msg->set_roomid(value);
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameProto.ReqStartGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 roomid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (8 & 0xFF)) {
          HasBitSetters::set_has_roomid(this);
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &roomid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameProto.ReqStartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameProto.ReqStartGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameProto.ReqStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->roomid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GameProto.ReqStartGame)
}

::google::protobuf::uint8* ReqStartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameProto.ReqStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 roomid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->roomid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameProto.ReqStartGame)
  return target;
}

size_t ReqStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameProto.ReqStartGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required uint32 roomid = 1;
  if (has_roomid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->roomid());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqStartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameProto.ReqStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqStartGame* source =
      ::google::protobuf::DynamicCastToGenerated<ReqStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameProto.ReqStartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameProto.ReqStartGame)
    MergeFrom(*source);
  }
}

void ReqStartGame::MergeFrom(const ReqStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameProto.ReqStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_roomid()) {
    set_roomid(from.roomid());
  }
}

void ReqStartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameProto.ReqStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqStartGame::CopyFrom(const ReqStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameProto.ReqStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqStartGame::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqStartGame::Swap(ReqStartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqStartGame::InternalSwap(ReqStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(roomid_, other->roomid_);
}

::google::protobuf::Metadata ReqStartGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameProto_2eproto);
  return ::file_level_metadata_GameProto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RespStartGame::InitAsDefaultInstance() {
}
class RespStartGame::HasBitSetters {
 public:
};

void RespStartGame::clear_gameuser() {
  gameuser_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespStartGame::kGameUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespStartGame::RespStartGame()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameProto.RespStartGame)
}
RespStartGame::RespStartGame(const RespStartGame& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_),
      gameuser_(from.gameuser_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Proto.GameProto.RespStartGame)
}

void RespStartGame::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RespStartGame_GameProto_2eproto.base);
}

RespStartGame::~RespStartGame() {
  // @@protoc_insertion_point(destructor:Proto.GameProto.RespStartGame)
  SharedDtor();
}

void RespStartGame::SharedDtor() {
}

void RespStartGame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespStartGame& RespStartGame::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RespStartGame_GameProto_2eproto.base);
  return *internal_default_instance();
}


void RespStartGame::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameProto.RespStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  gameuser_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RespStartGame::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RespStartGame*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        do {
          ptr = Varint::Parse32Inline(ptr, &size);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
          parser_till_end = ::Proto::GameBase::GameUserInfo::_InternalParse;
          object = msg->add_gameuser();
          if (size > end - ptr) goto len_delim_till_end;
          auto newend = ptr + size;
          bool ok = ctx->ParseExactRange({parser_till_end, object},
                                         ptr, newend);
          GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
          ptr = newend;
          if (ptr >= end) break;
        } while ((::google::protobuf::io::UnalignedLoad<::google::protobuf::uint64>(ptr) & 255) == 10 && (ptr += 1));
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RespStartGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameProto.RespStartGame)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_gameuser()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameProto.RespStartGame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameProto.RespStartGame)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RespStartGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameProto.RespStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameuser_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->gameuser(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GameProto.RespStartGame)
}

::google::protobuf::uint8* RespStartGame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameProto.RespStartGame)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->gameuser_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->gameuser(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameProto.RespStartGame)
  return target;
}

size_t RespStartGame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameProto.RespStartGame)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Proto.GameBase.GameUserInfo gameUser = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->gameuser_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->gameuser(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespStartGame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameProto.RespStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  const RespStartGame* source =
      ::google::protobuf::DynamicCastToGenerated<RespStartGame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameProto.RespStartGame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameProto.RespStartGame)
    MergeFrom(*source);
  }
}

void RespStartGame::MergeFrom(const RespStartGame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameProto.RespStartGame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gameuser_.MergeFrom(from.gameuser_);
}

void RespStartGame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameProto.RespStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespStartGame::CopyFrom(const RespStartGame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameProto.RespStartGame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespStartGame::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->gameuser())) return false;
  return true;
}

void RespStartGame::Swap(RespStartGame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespStartGame::InternalSwap(RespStartGame* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  CastToBase(&gameuser_)->InternalSwap(CastToBase(&other->gameuser_));
}

::google::protobuf::Metadata RespStartGame::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameProto_2eproto);
  return ::file_level_metadata_GameProto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void ReqKey::InitAsDefaultInstance() {
}
class ReqKey::HasBitSetters {
 public:
  static void set_has_key(ReqKey* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ReqKey::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ReqKey::ReqKey()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameProto.ReqKey)
}
ReqKey::ReqKey(const ReqKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  // @@protoc_insertion_point(copy_constructor:Proto.GameProto.ReqKey)
}

void ReqKey::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_ReqKey_GameProto_2eproto.base);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

ReqKey::~ReqKey() {
  // @@protoc_insertion_point(destructor:Proto.GameProto.ReqKey)
  SharedDtor();
}

void ReqKey::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ReqKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReqKey& ReqKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_ReqKey_GameProto_2eproto.base);
  return *internal_default_instance();
}


void ReqKey::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameProto.ReqKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    key_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ReqKey::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<ReqKey*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        ctx->extra_parse_data().SetFieldName("Proto.GameProto.ReqKey.key");
        auto str = msg->mutable_key();
        if (size > end - ptr + ::google::protobuf::internal::ParseContext::kSlopBytes) {
          object = str;
          str->clear();
          str->reserve(size);
          parser_till_end = ::google::protobuf::internal::GreedyStringParserUTF8Verify;
          goto len_delim_till_end;
        }
        GOOGLE_PROTOBUF_PARSER_ASSERT(::google::protobuf::internal::StringCheckUTF8Verify(ptr, size, ctx));
        ::google::protobuf::internal::InlineGreedyStringParser(str, ptr, size, ctx);
        ptr += size;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ReqKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameProto.ReqKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "Proto.GameProto.ReqKey.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameProto.ReqKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameProto.ReqKey)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void ReqKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameProto.ReqKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Proto.GameProto.ReqKey.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GameProto.ReqKey)
}

::google::protobuf::uint8* ReqKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameProto.ReqKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "Proto.GameProto.ReqKey.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameProto.ReqKey)
  return target;
}

size_t ReqKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameProto.ReqKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string key = 1;
  if (has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameProto.ReqKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqKey* source =
      ::google::protobuf::DynamicCastToGenerated<ReqKey>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameProto.ReqKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameProto.ReqKey)
    MergeFrom(*source);
  }
}

void ReqKey::MergeFrom(const ReqKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameProto.ReqKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_key()) {
    _has_bits_[0] |= 0x00000001u;
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
}

void ReqKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameProto.ReqKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqKey::CopyFrom(const ReqKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameProto.ReqKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqKey::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ReqKey::Swap(ReqKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ReqKey::InternalSwap(ReqKey* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::google::protobuf::Metadata ReqKey::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameProto_2eproto);
  return ::file_level_metadata_GameProto_2eproto[kIndexInFileMessages];
}


// ===================================================================

void RespActionMove::InitAsDefaultInstance() {
  ::Proto::GameProto::_RespActionMove_default_instance_._instance.get_mutable()->pos_ = const_cast< ::Proto::GameBase::Position*>(
      ::Proto::GameBase::Position::internal_default_instance());
}
class RespActionMove::HasBitSetters {
 public:
  static const ::Proto::GameBase::Position& pos(const RespActionMove* msg);
  static void set_has_pos(RespActionMove* msg) {
    msg->_has_bits_[0] |= 0x00000001u;
  }
};

const ::Proto::GameBase::Position&
RespActionMove::HasBitSetters::pos(const RespActionMove* msg) {
  return *msg->pos_;
}
void RespActionMove::clear_pos() {
  if (pos_ != nullptr) pos_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RespActionMove::kPosFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RespActionMove::RespActionMove()
  : ::google::protobuf::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Proto.GameProto.RespActionMove)
}
RespActionMove::RespActionMove(const RespActionMove& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(nullptr),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_pos()) {
    pos_ = new ::Proto::GameBase::Position(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:Proto.GameProto.RespActionMove)
}

void RespActionMove::SharedCtor() {
  ::google::protobuf::internal::InitSCC(
      &scc_info_RespActionMove_GameProto_2eproto.base);
  pos_ = nullptr;
}

RespActionMove::~RespActionMove() {
  // @@protoc_insertion_point(destructor:Proto.GameProto.RespActionMove)
  SharedDtor();
}

void RespActionMove::SharedDtor() {
  if (this != internal_default_instance()) delete pos_;
}

void RespActionMove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RespActionMove& RespActionMove::default_instance() {
  ::google::protobuf::internal::InitSCC(&::scc_info_RespActionMove_GameProto_2eproto.base);
  return *internal_default_instance();
}


void RespActionMove::Clear() {
// @@protoc_insertion_point(message_clear_start:Proto.GameProto.RespActionMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(pos_ != nullptr);
    pos_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* RespActionMove::_InternalParse(const char* begin, const char* end, void* object,
                  ::google::protobuf::internal::ParseContext* ctx) {
  auto msg = static_cast<RespActionMove*>(object);
  ::google::protobuf::uint32 size; (void)size;
  int depth; (void)depth;
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::ParseFunc parser_till_end; (void)parser_till_end;
  auto ptr = begin;
  while (ptr < end) {
    ptr = Varint::Parse32Inline(ptr, &tag);
    GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
    switch (tag >> 3) {
      // optional .Proto.GameBase.Position pos = 1;
      case 1: {
        if (static_cast<::google::protobuf::uint8>(tag) != 10) goto handle_unusual;
        ptr = Varint::Parse32Inline(ptr, &size);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr);
        parser_till_end = ::Proto::GameBase::Position::_InternalParse;
        object = msg->mutable_pos();
        if (size > end - ptr) goto len_delim_till_end;
        auto newend = ptr + size;
        bool ok = ctx->ParseExactRange({parser_till_end, object},
                                       ptr, newend);
        GOOGLE_PROTOBUF_PARSER_ASSERT(ok);
        ptr = newend;
        break;
      }
      default: {
      handle_unusual: (void)&&handle_unusual;
        if ((tag & 7) == 4 || tag == 0) {
          ctx->EndGroup(tag);
          return ptr;
        }
        auto res = UnknownFieldParse(tag, {_InternalParse, msg},
          ptr, end, msg->_internal_metadata_.mutable_unknown_fields(), ctx);
        ptr = res.first;
        GOOGLE_PROTOBUF_PARSER_ASSERT(ptr != nullptr);
        if (res.second) return ptr;
      }
    }  // switch
  }  // while
  return ptr;
len_delim_till_end: (void)&&len_delim_till_end;
  return ctx->StoreAndTailCall(ptr, end, {_InternalParse, msg},
                                 {parser_till_end, object}, size);
group_continues: (void)&&group_continues;
  GOOGLE_DCHECK(ptr >= end);
  GOOGLE_PROTOBUF_PARSER_ASSERT(ctx->StoreGroup({_InternalParse, msg}, {parser_till_end, object}, depth, tag));
  return ptr;
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool RespActionMove::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Proto.GameProto.RespActionMove)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .Proto.GameBase.Position pos = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) == (10 & 0xFF)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_pos()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Proto.GameProto.RespActionMove)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Proto.GameProto.RespActionMove)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

void RespActionMove::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Proto.GameProto.RespActionMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.GameBase.Position pos = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, HasBitSetters::pos(this), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Proto.GameProto.RespActionMove)
}

::google::protobuf::uint8* RespActionMove::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:Proto.GameProto.RespActionMove)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .Proto.GameBase.Position pos = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, HasBitSetters::pos(this), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Proto.GameProto.RespActionMove)
  return target;
}

size_t RespActionMove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Proto.GameProto.RespActionMove)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .Proto.GameBase.Position pos = 1;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RespActionMove::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Proto.GameProto.RespActionMove)
  GOOGLE_DCHECK_NE(&from, this);
  const RespActionMove* source =
      ::google::protobuf::DynamicCastToGenerated<RespActionMove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Proto.GameProto.RespActionMove)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Proto.GameProto.RespActionMove)
    MergeFrom(*source);
  }
}

void RespActionMove::MergeFrom(const RespActionMove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Proto.GameProto.RespActionMove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_pos()) {
    mutable_pos()->::Proto::GameBase::Position::MergeFrom(from.pos());
  }
}

void RespActionMove::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Proto.GameProto.RespActionMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RespActionMove::CopyFrom(const RespActionMove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Proto.GameProto.RespActionMove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RespActionMove::IsInitialized() const {
  return true;
}

void RespActionMove::Swap(RespActionMove* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RespActionMove::InternalSwap(RespActionMove* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  swap(pos_, other->pos_);
}

::google::protobuf::Metadata RespActionMove::GetMetadata() const {
  ::google::protobuf::internal::AssignDescriptors(&::assign_descriptors_table_GameProto_2eproto);
  return ::file_level_metadata_GameProto_2eproto[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace GameProto
}  // namespace Proto
namespace google {
namespace protobuf {
template<> PROTOBUF_NOINLINE ::Proto::GameProto::ReqStartGame* Arena::CreateMaybeMessage< ::Proto::GameProto::ReqStartGame >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GameProto::ReqStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GameProto::RespStartGame* Arena::CreateMaybeMessage< ::Proto::GameProto::RespStartGame >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GameProto::RespStartGame >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GameProto::ReqKey* Arena::CreateMaybeMessage< ::Proto::GameProto::ReqKey >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GameProto::ReqKey >(arena);
}
template<> PROTOBUF_NOINLINE ::Proto::GameProto::RespActionMove* Arena::CreateMaybeMessage< ::Proto::GameProto::RespActionMove >(Arena* arena) {
  return Arena::CreateInternal< ::Proto::GameProto::RespActionMove >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
